{"version":3,"sources":["socks5.js"],"names":["EVENTS","AUTHENTICATION","AUTHENTICATION_ERROR","CONNECTION_FILTER","HANDSHAKE","PROXY_CONNECT","PROXY_DATA","PROXY_DISCONNECT","PROXY_END","PROXY_ERROR","LENGTH_RFC_1928_ATYP","SocksServer","options","self","activeSessions","server","net","createServer","socket","on","err","emit","authenticate","buffer","authDomain","domain","create","binary","stream","word8","tap","args","requestBuffer","ver","RFC_1929_VERSION","end","RFC_1929_REPLIES","GENERAL_FAILURE","uname","toString","passwd","intercept","responseBuffer","Buffer","allocUnsafe","SUCCEEDED","write","once","connect","binaryStream","RFC_1928_VERSION","RFC_1928_REPLIES","push","dst","atyp","RFC_1928_ATYP","IPV4","addr","slice","call","buf","join","DOMAINNAME","IPV6","word32be","forEach","x","ADDRESS_TYPE_NOT_SUPPORTED","word16bu","cmd","RFC_1928_COMMANDS","CONNECT","connectionFilter","connectionFilterDomain","destination","origin","callback","setImmediate","address","port","remoteAddress","remotePort","CONNECTION_NOT_ALLOWED","createConnection","alloc","length","copy","pipe","destinationInfo","originInfo","data","hadError","exit","code","HOST_UNREACHABLE","CONNECTION_REFUSED","NETWORK_UNREACHABLE","response","ex","destroy","handshake","acceptedMethods","methods","reduce","method","basicAuth","next","noAuth","RFC_1928_METHODS","NO_AUTHENTICATION_REQUIRED","BASIC_AUTHENTICATION","NO_ACCEPTABLE_METHODS","splice","indexOf","exports","socksServer","events"],"mappings":"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","sourcesContent":["import {\n\tRFC_1928_ATYP,\n\tRFC_1928_COMMANDS,\n\tRFC_1928_METHODS,\n\tRFC_1928_REPLIES,\n\tRFC_1928_VERSION,\n\tRFC_1929_REPLIES,\n\tRFC_1929_VERSION\n} from './constants';\n\nimport binary from 'binary';\nimport domain from 'domain';\nimport net from 'net';\n\n\t// module specific events\nconst\n\tEVENTS = {\n\t\tAUTHENTICATION : 'authenticate',\n\t\tAUTHENTICATION_ERROR : 'authenticateError',\n\t\tCONNECTION_FILTER : 'connectionFilter',\n\t\tHANDSHAKE : 'handshake',\n\t\tPROXY_CONNECT : 'proxyConnect',\n\t\tPROXY_DATA : 'proxyData',\n\t\tPROXY_DISCONNECT : 'proxyDisconnect',\n\t\tPROXY_END : 'proxyEnd',\n\t\tPROXY_ERROR : 'proxyError'\n\t},\n\tLENGTH_RFC_1928_ATYP = 4;\n\n/**\n * The following RFCs may be useful as background:\n *\n * https://www.ietf.org/rfc/rfc1928.txt - NO_AUTH SOCKS5\n * https://www.ietf.org/rfc/rfc1929.txt - USERNAME/PASSWORD SOCKS5\n *\n **/\nclass SocksServer {\n\tconstructor (options) {\n\t\tlet self = this;\n\n\t\tthis.activeSessions = [];\n\t\tthis.options = options || {};\n\t\tthis.server = net.createServer((socket) => {\n\t\t\tsocket.on('error', (err) => {\n\t\t\t\tself.server.emit(EVENTS.PROXY_ERROR, err);\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * +----+------+----------+------+----------+\n\t\t\t * |VER | ULEN |  UNAME   | PLEN |  PASSWD  |\n\t\t\t * +----+------+----------+------+----------+\n\t\t\t * | 1  |  1   | 1 to 255 |  1   | 1 to 255 |\n\t\t\t * +----+------+----------+------+----------+\n\t\t\t *\n\t\t\t *\n\t\t\t * @param {Buffer} buffer - a buffer\n\t\t\t * @returns {undefined}\n\t\t\t **/\n\t\t\tfunction authenticate (buffer) {\n\t\t\t\tlet authDomain = domain.create();\n\n\t\t\t\tbinary\n\t\t\t\t\t.stream(buffer)\n\t\t\t\t\t.word8('ver')\n\t\t\t\t\t.word8('ulen')\n\t\t\t\t\t.buffer('uname', 'ulen')\n\t\t\t\t\t.word8('plen')\n\t\t\t\t\t.buffer('passwd', 'plen')\n\t\t\t\t\t.tap((args) => {\n\t\t\t\t\t\t// capture the raw buffer\n\t\t\t\t\t\targs.requestBuffer = buffer;\n\n\t\t\t\t\t\t// verify version is appropriate\n\t\t\t\t\t\tif (args.ver !== RFC_1929_VERSION) {\n\t\t\t\t\t\t\treturn end(RFC_1929_REPLIES.GENERAL_FAILURE, args);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tauthDomain.on('error', (err) => {\n\t\t\t\t\t\t\t// emit failed authentication event\n\t\t\t\t\t\t\tself.server.emit(\n\t\t\t\t\t\t\t\tEVENTS.AUTHENTICATION_ERROR,\n\t\t\t\t\t\t\t\targs.uname.toString(),\n\t\t\t\t\t\t\t\terr);\n\n\t\t\t\t\t\t\t// respond with auth failure\n\t\t\t\t\t\t\treturn end(RFC_1929_REPLIES.GENERAL_FAILURE, args);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// perform authentication\n\t\t\t\t\t\tself.options.authenticate(\n\t\t\t\t\t\t\targs.uname.toString(),\n\t\t\t\t\t\t\targs.passwd.toString(),\n\t\t\t\t\t\t\tsocket,\n\t\t\t\t\t\t\tauthDomain.intercept(() => {\n\t\t\t\t\t\t\t\t// emit successful authentication event\n\t\t\t\t\t\t\t\tself.server.emit(EVENTS.AUTHENTICATION, args.uname.toString());\n\n\t\t\t\t\t\t\t\t// respond with success...\n\t\t\t\t\t\t\t\tlet responseBuffer = Buffer.allocUnsafe(2);\n\t\t\t\t\t\t\t\tresponseBuffer[0] = RFC_1929_VERSION;\n\t\t\t\t\t\t\t\tresponseBuffer[1] = RFC_1929_REPLIES.SUCCEEDED;\n\n\t\t\t\t\t\t\t\t// respond then listen for cmd and dst info\n\t\t\t\t\t\t\t\tsocket.write(responseBuffer, () => {\n\t\t\t\t\t\t\t\t\t// now listen for more details\n\t\t\t\t\t\t\t\t\tsocket.once('data', connect);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}));\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * +----+-----+-------+------+----------+----------+\n\t\t\t * |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |\n\t\t\t * +----+-----+-------+------+----------+----------+\n\t\t\t * | 1  |  1  | X'00' |  1   | Variable |    2     |\n\t\t\t * +----+-----+-------+------+----------+----------+\n\t\t\t *\n\t\t\t * @param {Buffer} buffer - a buffer\n\t\t\t * @returns {undefined}\n\t\t\t **/\n\t\t\tfunction connect (buffer) {\n\t\t\t\tlet binaryStream = binary.stream(buffer);\n\n\t\t\t\tbinaryStream\n\t\t\t\t\t.word8('ver')\n\t\t\t\t\t.word8('cmd')\n\t\t\t\t\t.word8('rsv')\n\t\t\t\t\t.word8('atyp')\n\t\t\t\t\t.tap((args) => {\n\t\t\t\t\t\t// capture the raw buffer\n\t\t\t\t\t\targs.requestBuffer = buffer;\n\n\t\t\t\t\t\t// verify version is appropriate\n\t\t\t\t\t\tif (args.ver !== RFC_1928_VERSION) {\n\t\t\t\t\t\t\treturn end(RFC_1928_REPLIES.GENERAL_FAILURE, args);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// append socket to active sessions\n\t\t\t\t\t\tself.activeSessions.push(socket);\n\n\t\t\t\t\t\t// create dst\n\t\t\t\t\t\targs.dst = {};\n\n\t\t\t\t\t\t// ipv4\n\t\t\t\t\t\tif (args.atyp === RFC_1928_ATYP.IPV4) {\n\t\t\t\t\t\t\tbinaryStream\n\t\t\t\t\t\t\t\t.buffer('addr.buf', LENGTH_RFC_1928_ATYP)\n\t\t\t\t\t\t\t\t.tap((args) => {\n\t\t\t\t\t\t\t\t\targs.dst.addr = [].slice.call(args.addr.buf).join('.');\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// domain name\n\t\t\t\t\t\t} else if (args.atyp === RFC_1928_ATYP.DOMAINNAME) {\n\t\t\t\t\t\t\tbinaryStream\n\t\t\t\t\t\t\t\t.word8('addr.size')\n\t\t\t\t\t\t\t\t.buffer('addr.buf', 'addr.size')\n\t\t\t\t\t\t\t\t.tap((args) => {\n\t\t\t\t\t\t\t\t\targs.dst.addr = args.addr.buf.toString();\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// ipv6\n\t\t\t\t\t\t} else if (args.atyp === RFC_1928_ATYP.IPV6) {\n\t\t\t\t\t\t\tbinaryStream\n\t\t\t\t\t\t\t\t.word32be('addr.a')\n\t\t\t\t\t\t\t\t.word32be('addr.b')\n\t\t\t\t\t\t\t\t.word32be('addr.c')\n\t\t\t\t\t\t\t\t.word32be('addr.d')\n\t\t\t\t\t\t\t\t.tap((args) => {\n\t\t\t\t\t\t\t\t\targs.dst.addr = [];\n\n\t\t\t\t\t\t\t\t\t// extract the parts of the ipv6 address\n\t\t\t\t\t\t\t\t\t['a', 'b', 'c', 'd'].forEach((x) => {\n\t\t\t\t\t\t\t\t\t\tx = args.addr[x];\n\n\t\t\t\t\t\t\t\t\t\t// convert DWORD to two WORD values and append\n\t\t\t\t\t\t\t\t\t\t/* eslint no-magic-numbers : 0 */\n\t\t\t\t\t\t\t\t\t\targs.dst.addr.push(((x & 0xffff0000) >> 16).toString(16));\n\t\t\t\t\t\t\t\t\t\targs.dst.addr.push(((x & 0xffff)).toString(16));\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// format ipv6 address as string\n\t\t\t\t\t\t\t\t\targs.dst.addr = args.dst.addr.join(':');\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// unsupported address type\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn end(RFC_1928_REPLIES.ADDRESS_TYPE_NOT_SUPPORTED, args);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.word16bu('dst.port')\n\t\t\t\t\t.tap((args) => {\n\t\t\t\t\t\tif (args.cmd === RFC_1928_COMMANDS.CONNECT) {\n\t\t\t\t\t\t\tlet\n\t\t\t\t\t\t\t\tconnectionFilter = self.options.connectionFilter,\n\t\t\t\t\t\t\t\tconnectionFilterDomain = domain.create();\n\n\t\t\t\t\t\t\t// if no connection filter is provided, stub one\n\t\t\t\t\t\t\tif (!connectionFilter || typeof connectionFilter !== 'function') {\n\t\t\t\t\t\t\t\tconnectionFilter = (destination, origin, callback) => setImmediate(callback);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// capture connection filter errors\n\t\t\t\t\t\t\tconnectionFilterDomain.on('error', (err) => {\n\t\t\t\t\t\t\t\t// emit failed destination connection event\n\t\t\t\t\t\t\t\tself.server.emit(\n\t\t\t\t\t\t\t\t\tEVENTS.CONNECTION_FILTER,\n\t\t\t\t\t\t\t\t\t// destination\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\taddress : args.dst.addr,\n\t\t\t\t\t\t\t\t\t\tport : args.dst.port\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t// origin\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\taddress : socket.remoteAddress,\n\t\t\t\t\t\t\t\t\t\tport : socket.remotePort\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\terr);\n\n\t\t\t\t\t\t\t\t// respond with failure\n\t\t\t\t\t\t\t\treturn end(RFC_1929_REPLIES.CONNECTION_NOT_ALLOWED, args);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// perform connection\n\t\t\t\t\t\t\treturn connectionFilter(\n\t\t\t\t\t\t\t\t// destination\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\taddress : args.dst.addr,\n\t\t\t\t\t\t\t\t\tport : args.dst.port\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t// origin\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\taddress : socket.remoteAddress,\n\t\t\t\t\t\t\t\t\tport : socket.remotePort\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconnectionFilterDomain.intercept(() => {\n\t\t\t\t\t\t\t\t\tlet \n\t\t\t\t\t\t\t\t\t\tdestination = net.createConnection(\n\t\t\t\t\t\t\t\t\t\t\targs.dst.port,\n\t\t\t\t\t\t\t\t\t\t\targs.dst.addr,\n\t\t\t\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t\t\t\t// prepare a success response\n\t\t\t\t\t\t\t\t\t\t\t\tlet responseBuffer = Buffer.alloc(args.requestBuffer.length);\n\t\t\t\t\t\t\t\t\t\t\t\targs.requestBuffer.copy(responseBuffer);\n\t\t\t\t\t\t\t\t\t\t\t\tresponseBuffer[1] = RFC_1928_REPLIES.SUCCEEDED;\n\n\t\t\t\t\t\t\t\t\t\t\t\t// write acknowledgement to client...\n\t\t\t\t\t\t\t\t\t\t\t\tsocket.write(responseBuffer, () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// listen for data bi-directionally\n\t\t\t\t\t\t\t\t\t\t\t\t\tdestination.pipe(socket);\n\t\t\t\t\t\t\t\t\t\t\t\t\tsocket.pipe(destination);\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\tdestinationInfo = {\n\t\t\t\t\t\t\t\t\t\t\taddress : args.dst.addr,\n\t\t\t\t\t\t\t\t\t\t\tport : args.dst.port\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\toriginInfo = {\n\t\t\t\t\t\t\t\t\t\t\taddress : socket.remoteAddress,\n\t\t\t\t\t\t\t\t\t\t\tport : socket.remotePort\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t// capture successful connection\n\t\t\t\t\t\t\t\t\tdestination.on('connect', () => {\n\t\t\t\t\t\t\t\t\t\t// emit connection event\n\t\t\t\t\t\t\t\t\t\tself.server.emit(EVENTS.PROXY_CONNECT, destinationInfo, destination);\n\n\t\t\t\t\t\t\t\t\t\t// capture and emit proxied connection data\n\t\t\t\t\t\t\t\t\t\tdestination.on('data', (data) => {\n\t\t\t\t\t\t\t\t\t\t\tself.server.emit(EVENTS.PROXY_DATA, data);\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t// capture close of destination and emit pending disconnect\n\t\t\t\t\t\t\t\t\t\t// note: this event is only emitted once the destination socket is fully closed\n\t\t\t\t\t\t\t\t\t\tdestination.on('close', (hadError) => {\n\t\t\t\t\t\t\t\t\t\t\t// indicate client connection end\n\t\t\t\t\t\t\t\t\t\t\tself.server.emit(EVENTS.PROXY_DISCONNECT, originInfo, destinationInfo, hadError);\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\tconnectionFilterDomain.exit();\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// capture connection errors and response appropriately\n\t\t\t\t\t\t\t\t\tdestination.on('error', (err) => {\n\t\t\t\t\t\t\t\t\t\t// exit the connection filter domain\n\t\t\t\t\t\t\t\t\t\tconnectionFilterDomain.exit();\n\n\t\t\t\t\t\t\t\t\t\t// notify of connection error\n\t\t\t\t\t\t\t\t\t\terr.addr = args.dst.addr;\n\t\t\t\t\t\t\t\t\t\terr.atyp = args.atyp;\n\t\t\t\t\t\t\t\t\t\terr.port = args.dst.port;\n\n\t\t\t\t\t\t\t\t\t\tself.server.emit(EVENTS.PROXY_ERROR, err);\n\n\t\t\t\t\t\t\t\t\t\tif (err.code && err.code === 'EADDRNOTAVAIL') {\n\t\t\t\t\t\t\t\t\t\t\treturn end(RFC_1928_REPLIES.HOST_UNREACHABLE, args);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (err.code && err.code === 'ECONNREFUSED') {\n\t\t\t\t\t\t\t\t\t\t\treturn end(RFC_1928_REPLIES.CONNECTION_REFUSED, args);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\treturn end(RFC_1928_REPLIES.NETWORK_UNREACHABLE, args);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// bind and udp associate commands\n\t\t\t\t\t\t\treturn end(RFC_1928_REPLIES.SUCCEEDED, args);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * +----+-----+-------+------+----------+----------+\n\t\t\t * |VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |\n\t\t\t * +----+-----+-------+------+----------+----------+\n\t\t\t * | 1  |  1  | X'00' |  1   | Variable |    2     |\n\t\t\t * +----+-----+-------+------+----------+----------+\n\t\t\t *\n\t\t\t * @param {Buffer} response - a buffer representing the response\n\t\t\t * @param {object} args - arguments to supply to the proxy end event\n\t\t\t * @returns {undefined}\n\t\t\t **/\n\t\t\tfunction end (response, args) {\n\t\t\t\t// either use the raw buffer (if available) or create a new one\n\t\t\t\tlet responseBuffer = args.requestBuffer || Buffer.allocUnsafe(2);\n\n\t\t\t\tif (!args.requestBuffer) {\n\t\t\t\t\tresponseBuffer[0] = (RFC_1928_VERSION);\n\t\t\t\t}\n\n\t\t\t\tresponseBuffer[1] = response;\n\n\t\t\t\t// respond then end the connection\n\t\t\t\ttry {\n\t\t\t\t\tsocket.end(responseBuffer);\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tsocket.destroy();\n\t\t\t\t}\n\n\t\t\t\t// indicate end of connection\n\t\t\t\tself.server.emit(EVENTS.PROXY_END, response, args);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * +----+----------+----------+\n\t\t\t * |VER | NMETHODS | METHODS  |\n\t\t\t * +----+----------+----------+\n\t\t\t * | 1  |    1     | 1 to 255 |\n\t\t\t * +----+----------+----------+\n\t\t\t *\n\t\t\t * @param {Buffer} buffer - a buffer\n\t\t\t * @returns {undefined}\n\t\t\t **/\n\t\t\tfunction handshake (buffer) {\n\t\t\t\tbinary\n\t\t\t\t\t.stream(buffer)\n\t\t\t\t\t.word8('ver')\n\t\t\t\t\t.word8('nmethods')\n\t\t\t\t\t.buffer('methods', 'nmethods')\n\t\t\t\t\t.tap((args) => {\n\t\t\t\t\t\t// verify version is appropriate\n\t\t\t\t\t\tif (args.ver !== RFC_1928_VERSION) {\n\t\t\t\t\t\t\treturn end(RFC_1928_REPLIES.GENERAL_FAILURE, args);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// convert methods buffer to an array\n\t\t\t\t\t\tlet\n\t\t\t\t\t\t\tacceptedMethods = [].slice.call(args.methods).reduce((methods, method) => {\n\t\t\t\t\t\t\t\tmethods[method] = true;\n\t\t\t\t\t\t\t\treturn methods;\n\t\t\t\t\t\t\t}, {}),\n\t\t\t\t\t\t\tbasicAuth = typeof self.options.authenticate === 'function',\n\t\t\t\t\t\t\tnext = connect,\n\t\t\t\t\t\t\tnoAuth = !basicAuth &&\n\t\t\t\t\t\t\t\ttypeof acceptedMethods[0] !== 'undefined' &&\n\t\t\t\t\t\t\t\tacceptedMethods[0],\n\t\t\t\t\t\t\tresponseBuffer = Buffer.allocUnsafe(2);\n\n\t\t\t\t\t\t// form response Buffer\n\t\t\t\t\t\tresponseBuffer[0] = RFC_1928_VERSION;\n\t\t\t\t\t\tresponseBuffer[1] = RFC_1928_METHODS.NO_AUTHENTICATION_REQUIRED;\n\n\t\t\t\t\t\t// check for basic auth configuration\n\t\t\t\t\t\tif (basicAuth) {\n\t\t\t\t\t\t\tresponseBuffer[1] = RFC_1928_METHODS.BASIC_AUTHENTICATION;\n\t\t\t\t\t\t\tnext = authenticate;\n\n\t\t\t\t\t\t// if NO AUTHENTICATION REQUIRED and\n\t\t\t\t\t\t} else if (!basicAuth && noAuth) {\n\t\t\t\t\t\t\tresponseBuffer[1] = RFC_1928_METHODS.NO_AUTHENTICATION_REQUIRED;\n\t\t\t\t\t\t\tnext = connect;\n\n\t\t\t\t\t\t// basic auth callback not provided and no auth is not supported\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn end(RFC_1928_METHODS.NO_ACCEPTABLE_METHODS, args);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// respond then listen for cmd and dst info\n\t\t\t\t\t\tsocket.write(responseBuffer, () => {\n\t\t\t\t\t\t\t// emit handshake event\n\t\t\t\t\t\t\tself.server.emit(EVENTS.HANDSHAKE, socket);\n\n\t\t\t\t\t\t\t// now listen for more details\n\t\t\t\t\t\t\tsocket.once('data', next);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t// capture the client handshake\n\t\t\tsocket.once('data', handshake);\n\n\t\t\t// capture socket closure\n\t\t\tsocket.once('end', () => {\n\t\t\t\t// remove the session from currently the active sessions list\n\t\t\t\tself.activeSessions.splice(self.activeSessions.indexOf(socket), 1);\n\t\t\t});\n\t\t});\n\t}\n}\n\nexports.createServer = (options) => {\n\tlet socksServer = new SocksServer(options)\n\treturn socksServer.server;\n};\nexports.events = EVENTS;\nexports.SocksServer = SocksServer;\n"],"file":"socks5.js"}